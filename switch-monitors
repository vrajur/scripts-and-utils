#! /usr/bin/python3 
# 
# Template For Scripts
# 
# 
# Template Version 1.1

import os 
home = os.environ["HOME"]

import argparse
import subprocess

def parse_args ( ):

    # Create Argument Parser
    # TODO Add a fancy description here
    parser = argparse.ArgumentParser(description='Simple script for switching monitors') 
    
    # Add Arguments
    # TODO Add arguments
    parser.add_argument('-i', '--input', dest='input', default='toggle', type=str, help='Which monitor to switch to [dp, hdmi, toggle], default: toggle')
    # parser.add_argument('-F', '--force', dest="force", action="store_true", help="Force execution for existing directory (skip mkdir) when setting up new project")
    # parser.add_argument('-d', '--output-directory', dest='output_directory', type=str, default='/media/vinay/Shared Storage/Data/Uncategorized', help='Directory to create new reaper project in')
    # # parser.add_argument('-e', '--extension', type=str, default='mp3', help="Audio extension to use [mp3, wav, ...]")
    # parser.add_argument('-s', '--size', type=str, default='750x480', help="Image size WxH" )
    
    # Parse Args
    args = parser.parse_args()

    return args, parser

def check_args ( args, parser ): 
    
    # TODO Complete
    # Check Condition 
    if not args.input:
        parser.print_help()
        print ( "ERROR: Please provide input" )
        exit()
    elif args.input not in ['toggle', 'dp', 'hdmi']: 
        parser.print_help()
        print ( "ERROR: Please provide a valid input value")
    else:
        print ( args )

def run_toggle_command():

    # Get current monitor
    cmd1 = "xrandr"
    ret1 = subprocess.Popen(cmd1.split(' '), stdout=subprocess.PIPE)
    line = ret1.stdout.readline().decode()
    if "current 3440 x 1440" in line:
        # return run_hdmi_command()
        return run_extend_command()
    else: 
        return run_dp_command()

def run_dp_command():
    cmd1 = "xrandr --output DP-0 --auto"
    cmd2 = "xrandr --output HDMI-0 --off"
    ret1 = subprocess.call(cmd1.split(' '))
    ret2 = subprocess.call(cmd2.split(' '))

    return (ret1, ret2)

def run_hdmi_command():
    cmd1 = "xrandr --output HDMI-0 --auto"
    cmd2 = "xrandr --output DP-0 --off"
    ret1 = subprocess.call(cmd1.split(' '))
    ret2 = subprocess.call(cmd2.split(' '))

    return (ret1, ret2)

def run_extend_command():
    cmd = "xrandr --output HDMI-0 --auto --output DP-0 --primary --pos 1920x0"
    ret = subprocess.call(cmd.split(" "))

    return ret

def run ( **kwargs ):

    if kwargs['input'] == 'toggle':
        ret = run_toggle_command()
    elif kwargs['input'] == 'dp': 
        ret = run_dp_command()
    else: 
        ret = run_hdmi_command()

    # Finished!
    print ("Finished!")


if __name__ == "__main__":

    # TODO update this description
    print ( "Running - Fancy Template Script" )

    args, parser = parse_args() 

    check_args ( args, parser )

    kwargs = dict ( args._get_kwargs() )
    run ( **kwargs )
